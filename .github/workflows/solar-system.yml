name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mangodb+srv://supercluster.d83jj.magodb.net/superData'
  MONGO_USERNAME: ${{vars.MONGO_USERNAME}}
  MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}
jobs:
    unit-testing:
        name: Unit Testing
        
        services:
          mongo-db:
            image: gskdockershub/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        strategy:
          matrix:
            # node-version: [18,20]
            node-version: [18]
            os: [ubuntu-latest]
            exclude:
              - node-version: 18
                os: macos-latest
        runs-on: ${{matrix.os}}

        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v4
          with:
            node-version: ${{matrix.node-version}}
    
        - name: Install Dependencies
          run: npm install
        
        - name: Get npm cache directory
          uses: actions/cache@v4
          # id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          
        - name: Unit Testing
          run: npm test
          
        - name: Archive Test Result
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    code-coverage:
      name: Code Coverage
      runs-on: ubuntu-latest
      container:
        image: node:18
      services:
          mongo-db:
            image: gskdockershub/mongo-db:non-prod
            options:
              --name mongo
            # ports:
            #   - 27017:27017
      env:
        MONGO_URI: 'mongodb://mongo:27017/superData'
        MONGO_USERNAME: non-prod-user
        MONGO_PASSWORD: non-prod-password
        
      steps:
        - name: checkout Repo
          uses: actions/checkout@v4

        # - name: install node version - 18 #This job is no need because we have container with node version 18
        #   uses: actions/setup-node@v4
        #   with:
        #     node-version: 18
            
        - name: install dependencies
          run: npm install --save-dev mongodb-memory-server
        
        - name: Get npm cache directory
          uses: actions/cache@v4
          # id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
        
        - name: Run the Code Coverage
          run: npm run coverage

        - name: Archive Test Result
          uses: actions/upload-artifact@v4
          with:
            name: CodeCoverage Result
            path: coverage-result.xml
            retention-days: 5
      
    docker-login:
      name: containerization
      needs: [unit-testing, code-coverage]
      runs-on: ubuntu-latest

      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4 

      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}
      
      #for GHCR Login
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Docker build for Testing
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{vars.DOCKER_USER}}/solar-system:${{github.sha}}
      
      - name: Docker Image Testing
        run:  |
          docker images
          docker run --name solar-system-app -d \
              -p 3000:3000 \
              -e MONGO_URI=$MONGO_URI \
              -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              ${{vars.DOCKER_USER}}/solar-system:${{github.sha}}
          
          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP
          docker ps -a | grep solar-system-app
          docker inspect solar-system-app

          echo Testing Image URL using wget
          wget -q -O - 127.0.0.1:3000/live |grep live

      # - name: Docker Push to dockerhub
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .
      #     push: true
      #     tags: ${{vars.DOCKER_USER}}/solar-system:${{github.sha}}
      
      - name: Container Registry Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{vars.DOCKER_USER}}/solar-system:${{github.sha}}
            ghcr.io/${{ github.repository_owner }}/solar-system:${{github.sha}}
          
    Dev-Deploy:
      needs: docker-login
      environment: 
        name: development
        url: https://${{steps.set-ingress-host-address.outputs.APP_INGRESS_HOST}}
      outputs:
        APP_INGRESS_URL: ${{steps.set-ingress-host-address.outputs.APP_INGRESS_HOST}} #there is a job for set-ingress-host-address get public IP. Because this IP will be in dynamic.
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4

        - name: Install kubectls CLI
          uses: azure/setup-kubectl@v4
          with:
            version: 'v1.32.6' # default is latest stable
        
        - name: Set Kubeconfig File
          uses: azure/k8s-set-context@v4
          with:
            method: kubeconfig
            kubeconfig: ${{secrets.KUBECONFIG}}

        - name: Fetch Kubernets Cluster Details
          run: |
            #kubectl version
            echo "========================"
            echo "kubectl command eecuted successfully"
            # kubectl get nodes

        
        - name: Save Nginx Ingress Controller IP as a GITHUB Environment Variable
          run: |
            #echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress{0}.ip}")" >> $GITHUB_ENV
            echo "INGRESS_IP=32001" >> $GITHUB_ENV
        #By using $GITHUB_ENV we can save INGRESS_IP as a environemnt variable and can use these values form any of the jobs.
        
        - name: Replace Token in Manifest file
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: ${{vars.NAMESPACE}}
            REPLICAS: ${{vars.REPLICAS}}
            IMAGE: ${{vars.DOCKER_USER}}/solar-system:${{github.sha}}
            INGRESS_IP:  ${{env.INGRESS_IP}}
        
        - name: check the manifest files
          run: |
            cat kubernetes/development/*.yaml
        
        - name: Create MongoDB Secret
          run: |
            # kubectl -n ${{vars.NAMESPACE}} create secret generic mongo-db-creds \
            # --from-literal=MONGO_URI=${{env.MONGO_URI}} \
            # --from-literal=MONGO_USERNAME=${{vars.MONGO_USERNAME}} \
            # --from-literal=MONGO_PASSWORD=${{secrets.MONGO_PASSWORD}} \
            # --save-config \
            # --dry-run=client \
            # -o yaml |kubectl apply -f -
            echo "========================"
            echo "kubectl command eecuted successfully and DB creds were Saved"
        
        - name: Deploy to Dev Environemnt
          run: |
            kubectl apply -f kubernetes/development
        
        - name: Set App ingress Host URL
          id: set-ingress-host-address
          run: |
            echo "APP_INGRESS_HOST=$(kubectl -n ${{vars.NAMESPACE}} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")" >> "$GITHUB_OUTPUT"
    
    Integration-Testing:
      name: Dev Integration testing
      needs: Dev-Deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL output using curl and JQ
          env:
            URL: ${{needs.Dev-Deploy.outputs.APP_INGRESS_URL}}
          run: |
            echo $URL
            echo "=========================="
            curl https://$URL/live -s -k | jq -r .status|grep -i live
